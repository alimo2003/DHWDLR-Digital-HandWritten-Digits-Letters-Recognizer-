{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b0654165",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-27T19:13:59.479803Z",
     "iopub.status.busy": "2024-04-27T19:13:59.479336Z",
     "iopub.status.idle": "2024-04-27T19:24:41.699899Z",
     "shell.execute_reply": "2024-04-27T19:24:41.698271Z"
    },
    "papermill": {
     "duration": 642.229539,
     "end_time": "2024-04-27T19:24:41.703212",
     "exception": false,
     "start_time": "2024-04-27T19:13:59.473673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-04-27 19:14:05.081259: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-04-27 19:14:05.081449: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-04-27 19:14:05.282524: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "\u001b[1m1850/1850\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m116s\u001b[0m 62ms/step - accuracy: 0.8083 - loss: 0.7526 - val_accuracy: 0.6907 - val_loss: 0.9700\n",
      "Epoch 2/5\n",
      "\u001b[1m1850/1850\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m113s\u001b[0m 61ms/step - accuracy: 0.9270 - loss: 0.2497 - val_accuracy: 0.7293 - val_loss: 0.8695\n",
      "Epoch 3/5\n",
      "\u001b[1m1850/1850\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m107s\u001b[0m 58ms/step - accuracy: 0.9388 - loss: 0.2065 - val_accuracy: 0.7621 - val_loss: 0.7125\n",
      "Epoch 4/5\n",
      "\u001b[1m1850/1850\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m107s\u001b[0m 58ms/step - accuracy: 0.9455 - loss: 0.1811 - val_accuracy: 0.7502 - val_loss: 0.7589\n",
      "Epoch 5/5\n",
      "\u001b[1m1850/1850\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m105s\u001b[0m 57ms/step - accuracy: 0.9507 - loss: 0.1644 - val_accuracy: 0.7738 - val_loss: 0.6747\n",
      "\u001b[1m2055/2055\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 7ms/step - accuracy: 0.9737 - loss: 0.1086\n",
      "Test Loss: 0.23869650065898895\n",
      "Test Accuracy: 0.9269008636474609\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "# Load EMNIST dataset for digits and letters\n",
    "digits_data = pd.read_csv('/kaggle/input/emnist/emnist-digits-train.csv', header=None)\n",
    "letters_data = pd.read_csv('/kaggle/input/emnist/emnist-letters-train.csv', header=None)\n",
    "\n",
    "# Preprocess data\n",
    "def preprocess_data(data):\n",
    "    images = data.iloc[:, 1:].values.reshape(-1, 28, 28, 1).astype('float32') / 255.0\n",
    "    labels = to_categorical(data.iloc[:, 0], num_classes=36)  # Adjust to 36 classes for both digits and letters\n",
    "    return images, labels\n",
    "\n",
    "digits_images, digits_labels = preprocess_data(digits_data)\n",
    "letters_images, letters_labels = preprocess_data(letters_data)\n",
    "\n",
    "# Split data into train and test sets\n",
    "digits_train_images, digits_test_images, digits_train_labels, digits_test_labels = \\\n",
    "    train_test_split(digits_images, digits_labels, test_size=0.2, random_state=42)\n",
    "\n",
    "letters_train_images, letters_test_images, letters_train_labels, letters_test_labels = \\\n",
    "    train_test_split(letters_images, letters_labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# Combine digits and letters data\n",
    "combined_train_images = np.concatenate((digits_train_images, letters_train_images))\n",
    "combined_train_labels = np.concatenate((digits_train_labels, letters_train_labels))\n",
    "combined_test_images = np.concatenate((digits_test_images, letters_test_images))\n",
    "combined_test_labels = np.concatenate((digits_test_labels, letters_test_labels))\n",
    "\n",
    "# Define CNN model\n",
    "model = Sequential([\n",
    "    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Flatten(),\n",
    "    Dense(64, activation='relu'),\n",
    "    Dense(36, activation='softmax')  # 10 digits + 26 letters = 36 classes\n",
    "])\n",
    "\n",
    "# Compile model\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Train model\n",
    "model.fit(combined_train_images, combined_train_labels, epochs=5, batch_size=128, validation_split=0.1)\n",
    "\n",
    "# Evaluate model on test set\n",
    "test_loss, test_accuracy = model.evaluate(combined_test_images, combined_test_labels)\n",
    "print(\"Test Loss:\", test_loss)\n",
    "print(\"Test Accuracy:\", test_accuracy)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7160,
     "sourceId": 10705,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 649.84189,
   "end_time": "2024-04-27T19:24:45.805194",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-27T19:13:55.963304",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
